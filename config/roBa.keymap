#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 8>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 2 Q           &lt 3 W             &lt 2 E                   &mt LCTRL R             &mt LEFT_ALT T                                    &mt RCTRL Y                      &mt RIGHT_ALT U  &lt 2 I   &lt 3 O   &lt 2 P
&lt 3 A           &lt 3 S             &lt 2 D                   &lt 1 F                 &lt 1 G         &kp LS(LG(S))      &kp MINUS      &lt 1 H                          &lt 1 J          &lt 2 K   &lt 3 L   &lt 3 ENTER
&mt LEFT_SHIFT Z  &lt 3 X             &lt 2 C                   &lt 1 V                 &lt 1 B         &kp COLON          &kp SEMICOLON  &lt 1 N                          &lt 1 M          &mkp MB1  &mkp MB2  &mt RIGHT_SHIFT SLASH
&kp CAPSLOCK      &mt LCTRL C_VOL_DN  &mt LEFT_ALT C_VOLUME_UP  &mt LEFT_COMMAND LANG2  &lt 1 SPACE     &lt 2 TAB          &lt 1 SPACE    &mt RIGHT_COMMAND LANG_HIRAGANA                                       &kp BACKSPACE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        ARROW {
            bindings = <
&kp ESCAPE          &kp LS(LA(LEFT_ARROW))  &kp UP_ARROW    &kp LS(LA(RIGHT_ARROW))  &kp LS(UP_ARROW)                                &mt RIGHT_COMMAND UP_ARROW    &mt RIGHT_ALT LEFT_ARROW    &kp UP_ARROW                &mt RIGHT_ALT RIGHT_ARROW    &kp BACKSPACE
&kp LS(LEFT_ARROW)  &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp LS(RIGHT_ARROW)  &trans      &trans         &mt RIGHT_COMMAND LEFT_ARROW  &mt RIGHT_SHIFT LEFT_ARROW  &mt RIGHT_SHIFT DOWN_ARROW  &mt RIGHT_SHIFT RIGHT_ARROW  &mt RIGHT_COMMAND RIGHT_ARROW
&kp LS(LEFT_ARROW)  &kp LG(LS(LEFT_ARROW))  &kp LG(T)       &kp LG(LS(RIGHT_ARROW))  &kp LS(DOWN_ARROW)   &trans      &trans         &mt RIGHT_COMMAND DOWN_ARROW  &kp RG(LEFT_BRACKET)        &kp RG(R)                   &kp RG(RIGHT_BRACKET)        &kp RS(RIGHT_ARROW)
&kp LG(F)           &kp LG(MINUS)           &kp LG(EQUAL)   &kp F14                  &kp F15              &trans      &kp PAGE_DOWN  &kp PAGE_UP                                                                                                        &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                   &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &trans          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans        &trans                       &trans          &trans                                                                     &kp PIPE
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
