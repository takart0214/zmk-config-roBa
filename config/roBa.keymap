#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 8>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };
    };

    behaviors {
        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 2 Q           &lt 5 W             &lt 3 E                   &lt 4 R                      &lt 6 T                                  &mt RIGHT_ALT Y               &mt RCTRL U  &lt 2 I   &lt 5 O   &lt 2 P
&lt 5 A           &lt 5 S             &lt 2 D                   &lt 1 F                      &lt 1 G      &kp ENTER      &trans       &lt 1 H                       &lt 1 J      &lt 2 K   &lt 5 L   &lt 5 ENTER
&mt LEFT_SHIFT Z  &lt 5 X             &lt 2 C                   &lt 1 V                      &lt 1 B      &trans         &trans       &lt 1 N                       &lt 1 M      &mkp MB1  &mkp MB2  &mt RIGHT_SHIFT SLASH
&kp CAPSLOCK      &mt LCTRL C_VOL_DN  &mt LEFT_ALT C_VOLUME_UP  &mt LEFT_COMMAND LANGUAGE_2  &lt 1 SPACE  &lt 2 TAB      &lt 1 SPACE  &mt RIGHT_COMMAND LANGUAGE_1                                   &kp BACKSPACE
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        ARROW {
            bindings = <
&kp ESCAPE          &kp LS(LA(LEFT_ARROW))     &kp UP_ARROW               &kp LS(LA(RIGHT_ARROW))     &kp LS(UP_ARROW)                                &kp RG(UP_ARROW)    &kp RA(LEFT_ARROW)          &kp UP_ARROW                &kp RA(RIGHT_ARROW)          &kp BACKSPACE
&kp LS(LEFT_ARROW)  &mt LEFT_SHIFT LEFT_ARROW  &mt LEFT_SHIFT DOWN_ARROW  &mt LEFT_SHIFT RIGHT_ARROW  &kp LS(RIGHT_ARROW)  &trans      &trans         &kp RG(LEFT_ARROW)  &mt RIGHT_SHIFT LEFT_ARROW  &mt RIGHT_SHIFT DOWN_ARROW  &mt RIGHT_SHIFT RIGHT_ARROW  &kp RG(RIGHT_ARROW)
&kp LS(LEFT_ARROW)  &kp LG(LA(LEFT_ARROW))     &kp LG(T)                  &kp LG(LA(RIGHT_ARROW))     &kp LS(DOWN_ARROW)   &trans      &trans         &kp RG(DOWN_ARROW)  &kp RG(LEFT_BRACKET)        &kp RG(R)                   &kp RG(RIGHT_BRACKET)        &kp RS(RIGHT_ARROW)
&kp LG(F)           &kp LG(MINUS)              &kp LG(EQUAL)              &kp F14                     &kp F15              &tog 1      &kp PAGE_DOWN  &kp PAGE_UP                                                                                              &tog 0
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        NUM {
            bindings = <
&kp NUMBER_1      &mt LEFT_SHIFT NUMBER_2  &mt LEFT_SHIFT NUMBER_3  &mt LEFT_SHIFT NUMBER_4     &kp N5                                                       &kp NUMBER_6         &mt RIGHT_SHIFT N7  &mt RIGHT_SHIFT N8  &mt RIGHT_SHIFT N9  &kp N0
&kp LC(LA(U))     &kp LA(LC(I))            &kp LA(LC(UP_ARROW))     &kp LA(LC(LEFT_ARROW))      &kp LA(LC(RIGHT_ARROW))      &trans      &trans              &kp RA(RC(RG(H)))    &kp RC(RA(D))       &kp RA(RC(F))       &kp RC(RA(G))       &kp RA(RC(ENTER))
&kp LA(LC(J))     &kp LA(LC(K))            &kp LA(LC(DOWN_ARROW))   &kp LA(LC(LG(LEFT_ARROW)))  &kp LA(LC(LG(RIGHT_ARROW)))  &trans      &trans              &kp RA(RC(RG(R)))    &kp RA(RC(E))       &kp RA(RC(R))       &kp RA(RC(T))       &kp RA(RC(BACKSPACE))
&kp LC(UP_ARROW)  &kp LA(LG(M))            &kp LA(LG(D))            &kp F11                     &kp LC(DOWN_ARROW)           &tog 2      &kp RC(LEFT_ARROW)  &kp RC(RIGHT_ARROW)                                                              &tog 0
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&kp LS(NUMBER_1)      &kp LS(NUMBER_2)      &kp LS(NUMBER_3)   &kp LS(NUMBER_4)          &kp LS(N5)                                                       &kp LEFT_BRACKET        &kp RIGHT_BRACKET  &kp NON_US_BACKSLASH  &kp MINUS      &kp EQUAL
&kp LS(GRAVE)         &kp LA(LC(LG(S)))     &kp LA(LC(LG(D)))  &kp LA(LC(LG(F)))         &kp LA(LC(LG(G)))     &trans              &kp RS(RG(C))          &kp RS(SEMICOLON)       &kp RS(SQT)        &kp BACKSLASH         &kp RS(MINUS)  &kp RS(EQUAL)
&mt LEFT_SHIFT GRAVE  &kp LA(LC(LG(X)))     &trans             &trans                    &trans                &kp LS(LG(N5))      &kp RG(RS(NUMBER_4))   &kp SEMICOLON           &kp SQT            &kp COMMA             &kp PERIOD     &trans
&kp LC(LS(K_POWER))   &kp LS(LG(NUMBER_2))  &kp LA(LC(LG(E)))  &mt LEFT_SHIFT LS(LG(V))  &mt LEFT_SHIFT LG(V)  &tog 5              &mt RIGHT_SHIFT COMMA  &mt RIGHT_SHIFT PERIOD                                                          &tog 0
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
